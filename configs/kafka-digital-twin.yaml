# Kafka driver configuration optimized for Digital Twin scenarios
# Uses Confluent Kafka Python client with high-performance settings

name: Kafka Digital Twin Driver
driverClass: benchmark.drivers.kafka.KafkaDriver

# Digital Twin optimized settings
replicationFactor: 1

topicConfig: |
  # Optimized for high-frequency sensor data
  min.insync.replicas=1
  cleanup.policy=delete
  retention.ms=86400000
  segment.ms=3600000
  compression.type=lz4
  # Higher throughput settings
  segment.bytes=268435456
  max.message.bytes=2097152

commonConfig: |
  bootstrap.servers=localhost:9092
  # Increased timeouts for better reliability in Digital Twin scenarios
  default.api.timeout.ms=300000
  request.timeout.ms=120000
  # Connection optimizations
  socket.keepalive.enable=true
  socket.send.buffer.bytes=131072
  socket.receive.buffer.bytes=131072

producerConfig: |
  # Digital Twin optimized producer settings

  # Reliability settings for critical IoT data
  acks=all
  enable.idempotence=true
  retries=2147483647
  delivery.timeout.ms=300000
  retry.backoff.ms=100

  # Performance optimizations for sensor data streams
  batch.size=65536
  linger.ms=5
  compression.type=lz4
  buffer.memory=67108864
  max.request.size=2097152

  # Connection pool optimizations
  connections.max.idle.ms=300000
  max.in.flight.requests.per.connection=5

  # Monitoring and debugging
  client.id=digital-twin-producer

consumerConfig: |
  # Digital Twin optimized consumer settings

  # Positioning and offset management
  auto.offset.reset=earliest
  enable.auto.commit=false

  # Performance settings for real-time processing (Confluent Kafka compatible)
  fetch.min.bytes=1
  fetch.max.bytes=52428800
  max.partition.fetch.bytes=1048576

  # Session management for reliable processing
  session.timeout.ms=30000
  heartbeat.interval.ms=3000
  max.poll.interval.ms=300000

  # Connection optimizations
  connections.max.idle.ms=300000

  # Monitoring and debugging
  client.id=digital-twin-consumer